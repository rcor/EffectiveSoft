---
name: Validate and Deploy
on:
  push:
    branches:
      - main
jobs:
  cloudformation-linter-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Cloud Formation Linter with Latest Version
        uses: scottbrenner/cfn-lint-action@v2
      - name: Print the Cloud Formation Linter Version & run Linter.
        run: |
          cfn-lint --version
          cd cloudformation
          cfn-lint -t ./template.yaml
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: hello-world-stack
          template: cloudformation/template.yaml
          parameter-overrides: VpcId=${{ secrets.VPC_ID }},SubnetIds=${{
            secrets.SUBNETS_ID }},DesiredCount=${{ secrets.DESIRED_COUNT
            }},RepositoryName=${{ secrets.REPOSITORY_NAME }}
  docker-validate-deploy:
    name: Validate  Dockerfile
    runs-on: ubuntu-latest
    needs: cloudformation-linter-and-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Validate Dockerfile
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: >
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: my-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: my-application-container
          cluster: ecs-cluster
          wait-for-service-stability: true
